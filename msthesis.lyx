#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass UNCC-thesis
\begin_preamble
\usepackage{adjustbox}
\usepackage{xcolor}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{roman}
\end_layout

\begin_layout Plain Layout


\backslash
fbmatterchapterformat
\end_layout

\begin_layout Plain Layout

% Doctype should be either dissertation proposal, dissertation, or thesis.
\end_layout

\begin_layout Plain Layout

% If you're getting a master's, specify "thesis" below.
  
\end_layout

\begin_layout Plain Layout

% If you're getting a PhD, specify "dissertation" below.
\end_layout

\begin_layout Plain Layout


\backslash
doctype{thesis}
\end_layout

\begin_layout Plain Layout

%%%%%%%%%%%%%%%%     IMPORTANT! IMPORTANT! IMPORTANT! %%%%%%%%%%%%%%%%
\end_layout

\begin_layout Plain Layout

% The rules below MUST be followed for the abstract page and chapter titles
\end_layout

\begin_layout Plain Layout

% to be correctly formatted.
\end_layout

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout

% 1.
 Only the first letter of the entire title should be capitalized to allow
 the 
\end_layout

\begin_layout Plain Layout

%    title to appear as required by the graduate school on the Abstract
 page.
\end_layout

\begin_layout Plain Layout

% 2.
 Write chapter titles in ALL CAPS.
\end_layout

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
title{Establishing autonomous swarm communication behavior within unmanned
 areial vehicles in a DE-centralized environment}
\end_layout

\begin_layout Plain Layout


\backslash
author{Terrill Earl Massey}
\end_layout

\begin_layout Plain Layout


\backslash
degree{Master of Science}
\end_layout

\begin_layout Plain Layout


\backslash
major{Electrical Engineering}
\end_layout

\begin_layout Plain Layout


\backslash
publicationyear{2015}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
advisor{Dr.
 James M.
 Conrad}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% Add the full name and title of all your committee members,
\end_layout

\begin_layout Plain Layout

% apart from your advisor, one by one.
  The style file expects
\end_layout

\begin_layout Plain Layout

% 3 to 5 committee members in addition to your advisor.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
committeeMember{Dr.
 Asis Nasipuri}
\end_layout

\begin_layout Plain Layout


\backslash
committeeMember{Dr.
 Bharat Joshi}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% Generate the preliminary title page and copyright page.
\end_layout

\begin_layout Plain Layout


\backslash
maketitlepage
\end_layout

\begin_layout Plain Layout


\backslash
makecopyright
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Abstract
Many situations occur in which some type of exploratory effort is required
 for a large area that may be inaccessible to humans, such as a nuclear
 power plant or a disaster area.
 A quadrotor swarm is attractive for these applications because it proposes
 a method to autonomously share mission information between all of the participa
ting quadrotors and collaboratively complete a task.
 This allows an autonomous quadrotor swarm to perform tasks quickly when
 compared to manually operated quadrotors.
 Current research in quadrotor swarm algorithms does not take into account
 inaccessible or remote environments.
 Those swarms require the use of a remote coordination platform that tracks
 the position of the swarm and facilitates swarm coordination from a distance.
 This requires the swarm to be within line-of-sight of the remote coordinator.
 
\end_layout

\begin_layout Abstract
The research presented in this thesis aims to add more deployment and operation
 flexibility to a quadrotor swarm through the use of a de-centralized coordinati
on algorithm in a wireless environment and a pre-exisiting on-board vision
 system.
 The constructed de-centralized coordination algorithm provides a method
 to track the position of all participating quadrotors, provids a communication
 method to maintain the geometric integrity of the swarm through coordinating
 specific movement commands to the followers, establishes a communication
 algorithmto uniformly move the swarm to a desired position, and provides
 situation awareness to the swarm through collision detection.
 
\end_layout

\begin_layout Acknowledgements
I would foremost like to acknowledge my advisor Dr.
 Conrad for providing the time, mentoring, and support throughout my research.
 I would also like to acknowledge Christopher Wesley for his support and
 work contributed for the basis of my research.
 I would like to also acknowledge my family and friends for their emotional
 support throughout the research.
 
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList table

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\begin_layout Plain Layout


\backslash
renewcommand{
\backslash
nomname}{LIST OF ABBREVIATIONS}
\end_layout

\begin_layout Plain Layout

% uncomment line below to title your nomenclature list as LIST OF SYMBOLS
\end_layout

\begin_layout Plain Layout

%
\backslash
renewcommand{
\backslash
nomname}{LIST OF SYMBOLS}
\end_layout

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{
\backslash
nomname}
\end_layout

\end_inset


\begin_inset CommandInset nomencl_print
LatexCommand printnomenclature
set_width "auto"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "ECE"
description "An acronym for Electrical and Computer Engineering."

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\begin_layout Plain Layout


\backslash
setcounter{page}{1}
\end_layout

\begin_layout Plain Layout


\backslash
pagenumbering{arabic}
\end_layout

\begin_layout Plain Layout

% 2 inch top spacing for new chapters
\end_layout

\begin_layout Plain Layout


\backslash
bodychapterformat
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Section
Research Motivation 
\end_layout

\begin_layout Standard
A quadrotor swarm is advantageous in situations where an exploratory effort
 is required for a large area.
 For example, a large natural disaster area that requires surveying for
 damage analysis would benefit from a swarm of quadrotors that autonomously
 collaborate with each other in order to sweep a large area in a quick time
 frame.
 Also, with a quadrotor swarm, the information that the participating quadrotors
 can be shared within the swarm so that simple decisions can be made without
 human interference.
 For example, a participating quadrotor could notify the swarm that a certain
 sector within a survey region has been explored already, thus allowing
 for the swarm to move to the next sector without the wasted costs of re
 surveying a previous sector.
 Another benefit of quadrotor swarms lies within the robust nature of the
 swarm system.
 With a singular quadrotor, the exploratory mission is compromised when
 the quadrotor is terminated (due to depletion of power supply or various
 environmental influences).
 Therefore the success of the objective is influenced by the lifetime of
 quadrotor node.
 In comparison, the lifetime of a quadrotor swarm is influenced by the number
 active nodes within the swarm.
 Typically the integrity of the mission is not compromised until all quadrotor
 participants within the swarm are terminated.
 This allows quadrotor swarms to behave in a robust manner where they can
 still perform a mission even in the presence of terminated or damaged quadrotor
 nodes.
 
\end_layout

\begin_layout Section
Research Objective
\end_layout

\begin_layout Standard
The main objective of this research is to explore the best method of creating
 a communication algorithm within an embedded system that will allow quadrotors
 to dynamically establish and retain quadrotor swarm formations without
 the use of an external processing node or unit.
 The type of swarm topology used throughout this research was the cross
 formation.
 This is where the coordinating node, or the leader quadrotor is established
 within the center of the swarm, and the following nodes are at relatively
 perpendicular positions in relation to the quadrotor as depicted in Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Basic-Swarm-Attemptingcrossformation"

\end_inset

.
 The Leading/Coordinating quadrotor in this research will be outfitted with
 a set of beacons to each of its sides along with a camera that will have
 visibility of a stationary beacon.
 Each of the followers will be outfitted with a beacon on all sides and
 a camera with initial line of sight visibility with the beacons located
 on the coordinating quadroror.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/basic_swarm.png

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Basic Swarm Attempting to Maintain the Cross Formation
\begin_inset CommandInset label
LatexCommand label
name "fig:Basic-Swarm-Attemptingcrossformation"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Research Contribution
\end_layout

\begin_layout Standard
This research contributes a framework that can establish a de-centralized
 swarm algorithm.
 This is achieved through establishing the swarm coordination process on
 the swarm itself, which is referred to as a de-centralized quadrotor swarm.
 This de-centralized quadrotor swarm is realized through two main aspects
 that must be present.
 The first aspect is a on-board vision system that resides on participating
 quadrotor platforms in the swarm, and the second aspect is a swarm algorithm
 that is implemented within the swarm itself.
 The vision system allows the participating quadrotors to establish their
 position with respect to the center of the swarm.
 The swarm algorithm is a communication based algorithm that accepts position
 data from all participating quadrotors and assigns the appropriate movement
 commands.
 The swarm algorithm is necessary in establishing situation awareness for
 each participating quadrotor and coordinating vectored movements for the
 entire swarm.
 The swarm algorithm or coordination process resides in a master quadrotor
 platform that is designated as the coordinator.
 The other participating quadrotors are designated as followers, and receive
 movement commands from the coordinator in respect to the current position
 that the follower advertises to the coordinator.
 The position data that the follower coordinators are in respect to the
 coordinator.
 For availability, there may be multiple coordinators within a large swarm,
 in which each coordinator is responsible for its own area, or cluster.
 The coordinator at the lowest cluster (the first cluster established) will
 communicate movement vector commands to the rest of the swarm.
 
\end_layout

\begin_layout Standard
The contributions of this research are
\end_layout

\begin_layout Itemize
the establishment of the de-centralized swarm algorithm/ swarm coordination
 process that issues movement commands based on a existing vision system
 that reports a position of a quadrotor based on its orientation to a beacon
\end_layout

\begin_layout Itemize
obstacle detection within the swarm for early obstacle avoidance protocol
\end_layout

\begin_layout Itemize
a process for swarm maintenance within the swarm
\end_layout

\begin_layout Standard
These contributions are advantageous in the sense that a de-centralized
 swarm algorithm will guarantee a more flexible swarm deployment in where
 the swarm is not confined to a certain area.
 This allows the swarm to approach more versatile missions such as surveillance
 in a environment non accessible to humans.
 
\end_layout

\begin_layout Section
Organization of Thesis
\end_layout

\begin_layout Standard
Chapter 2 of this thesis provides a physical overview of the quadrotor platform
 through providing a discussion of a its basic dynamic model, and provides
 an insight to the research that has recently been conducted within the
 academic community.
 Chapter 3 and 4 of this thesis explore the characteristics of the quadrotor
 platform and communication platform, used within the conducted research
 respectively.
 Chapter 5 then discusses the swarm algorithm design and implementation
 within the research.
 Chapter 6 highlights the concerns and areas of improvement in the future
 with the platforms, algorithms used within the research, and future works
 that can be explored.
 
\end_layout

\begin_layout Chapter
Background and Literature Review 
\end_layout

\begin_layout Section
Quadrotor Platform Overview 
\end_layout

\begin_layout Standard
Quadrotor platforms are unmanned aerial vehicles that are composed of four
 rotating propellers.
 The four rotating propellers allow the quadrotor platform to sustain lift,
 and perform various aerial maneuvers with more precision when compared
 to a conventional helicopter platforms.
 With the capability of performing precise aerial movements combined with
 a relatively small frame structure, and low production costs, quadrotor
 platforms are attractive for hobbyist, surveillance, and payload manipulation.
 In the commercial industry, interest for quadrotor platforms is prevalent.
 DHL is such a company that has pursed the potential benefits of using quadrotor
 platforms for payload manipulation as seen in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:DHL-Quadrotor-Unmanned"

\end_inset

 .
 As shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:DHL-Quadrotor-Unmanned"

\end_inset

, these quadrotor platforms are capable of light payload manipulation that
 can be served as payload transportation and package deliveries.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/DHL_quadrotor.jpg
	scale 50
	rotateOrigin leftBottom

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
DHL Quadrotor Unmanned Aerial Vehicle used in Payload Transportation
\begin_inset CommandInset label
LatexCommand label
name "fig:DHL-Quadrotor-Unmanned"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In construction, quadrotor platforms are attractive for land surveying and
 mapping.
 When equipped with the appropriate sensor platform, such as LIDAR 
\begin_inset CommandInset citation
LatexCommand cite
key "LIDAR"

\end_inset

 , land mapping can be efficient and fast due to the aerial maneuverability
 of the quadrotor platform and its ability to travel across an area relatively
 quickly when compared to conventional techniques for land surveying/mapping.
 Although a singular quadrotor is capable of performing the previously mentioned
 tasks of surveillance/land mapping and payload manipulation effectively,
 having multiple quadrotors autonomously collaborate together in order to
 achieve these tasks enhances efficiency, speed of execution, higher resilience
 to human error, and robustness.
 Quadrotor swarms also enable the use of particular applications that cannot
 be practically realized with a single quadrotor platform.
 One such application is the implementation of an Ad Hoc telecommunication
 network coverage area for disaster areas.
 Proposed by M.Sakti Alvissalim in 
\begin_inset CommandInset citation
LatexCommand cite
key "NetworkCoverageQuadrotorSwarms"

\end_inset

, quadrotor swarms can be outfitted in such a way in where each participating
 quadrotor provides certain coverage of an area, similar to a cellular site.
 Communication links are maintained within the swarm in order to establish
 end-to-end communication link from the client to the access point to the
 back bone network.
 
\end_layout

\begin_layout Standard
Recently, research interests have peaked in the realm of autonomous quadrotor
 swarms.
 GRASP laboratory from the University of Pennsylvania constructed and demonstrat
ed a centralized quadrotor swarm that perform various aerial maneuvers as
 depicted in 
\begin_inset CommandInset citation
LatexCommand cite
key "GRASP"

\end_inset

.
 
\end_layout

\begin_layout Subsection
Quadrotor Platform Dynamic Model
\end_layout

\begin_layout Standard
A quadrotor is a unmanned aerial vehicle with four rotors.
 In most quadrotor applications, the rotors on the quadrotor platform are
 brush-less electric motors.
 Each rotor produces torque, which in turn produces thrust for the quadrotor
 platform.
 The higher the angular velocity of the rotor, the more thrust the rotor
 will produce.
 Certain combinations of angular velocities of the rotors will generate
 main thrust, pitch torque, and roll torque for the quadrotor 
\begin_inset CommandInset citation
LatexCommand cite
key "QUADROTORCRAFTCONTROL"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/quadrotor_dyanmic_model.png

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Quadrotor Dynamic Model.
 
\begin_inset CommandInset citation
LatexCommand cite
key "QUADROTORCRAFTCONTROL"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:Quadrotor-Dynamic-Model"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Depicted in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Quadrotor-Dynamic-Model"

\end_inset

, the front rotor (M
\begin_inset Formula $_{1}$
\end_inset

) and the rear rotor (M
\begin_inset Formula $_{3}$
\end_inset

) rotate counter-clockwise, whereas the front rotor (M
\begin_inset Formula $_{2}$
\end_inset

 and the rear rotor (M
\begin_inset Formula $_{4}$
\end_inset

) rotate clockwise in order to produce and overall thrust vector (u).
 The overall thrust vector(u) of the quadrotor platform is depicted as 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
u=f_{1}+f_{2}+f_{3}+f_{4}\label{eq:overall thrust}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where the overall thrust is equal to the summation of the individual thrusts
 of each motor.
 The amount of pitch torque that the quadrotor experience is a function
 of 
\begin_inset Formula $f_{1}-f_{3}$
\end_inset

,which is the difference of the thrust exerted by rotor M
\begin_inset Formula $_{1}$
\end_inset

 and the force exerted by rotor M
\begin_inset Formula $_{3}$
\end_inset

.
 The amount of roll torque that the quadrotor performs is a function of
 
\begin_inset Formula $f_{2}-f_{4}$
\end_inset

, which is the difference between the thrust exerted by rotor M
\begin_inset Formula $_{2}$
\end_inset

 and the thrust exerted by the rotor M
\begin_inset Formula $_{4}$
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "QUADROTORCRAFTCONTROL"

\end_inset

.
 
\end_layout

\begin_layout Standard
The amount of yaw torque that the quadrotor platform experience is 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\tau_{Yaw}=\tau_{M_{1}}+\tau_{M_{2}}+\tau_{3_{1}}+\tau_{M_{4}}\label{eq:yaw torque}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $\tau_{M_{i}}$
\end_inset

is the reaction torque of rotor i due to shaft acceleration and blade drag.
 The reaction torque is equal to the aerodynamic drag seen by the rotor
 blade 
\begin_inset CommandInset citation
LatexCommand cite
key "QUADROTORCRAFTCONTROL"

\end_inset

.
 The aerodynamic drag experienced by a given quadrotor rotor is represented
 as 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\tau_{Drag}=\frac{1}{2}pAv^{2}\label{eq:drag representation}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $p$
\end_inset

 is the air density, 
\begin_inset Formula $A$
\end_inset

 is the frontal area of the moving rotor blade, and 
\begin_inset Formula $v$
\end_inset

 is the blade object's velocity relative to the air.
 The angular velocity 
\begin_inset Formula $ω$
\end_inset

 is proportional to the linear velocity 
\begin_inset Formula $v$
\end_inset

 and radius 
\begin_inset Formula $r$
\end_inset

 of the rotor blade through the relationship depicted in Equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:angular velocity"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
ω=\frac{v}{r}\label{eq:angular velocity}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
The aerodynamic drag experienced by the quadrotor can be re-written as 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\tau_{Drag}=k_{drag}ω^{2}\label{eq:aerodynamic drag with angular velocity}
\end{equation}

\end_inset

 
\end_layout

\begin_layout Standard
where 
\begin_inset Formula $k_{drag}=\frac{1}{2R}pA$
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "QUADROTORCRAFTCONTROL"

\end_inset

.
 It can be assumed that 
\begin_inset Formula $k_{drag}$
\end_inset

 is a positive constant, due to the constant radius of the rotor blade,
 constant surface area of the blade, and the constant air pressure in the
 atmosphere for near surface flight (less than 100ft).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename figs/quadrotor_movement_model.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Quadrotor Platform Movement Model.
\begin_inset CommandInset citation
LatexCommand cite
key "QUADROTORCRAFTCONTROL"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:Quadrotor-Platform-Movement-Model"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Typical motors used within a quadrotor platform are brush-less, electric
 motors that can be controlled by Electronic Speed Controllers(ESC
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "ESC"
description "Electronic Speed Control"

\end_inset

).
 Electronic Speed controllers are advantageous for motor control because
 they offer a method to regulate the amount of power transferred to the
 motor.
 An ESC interprets a Pulse Width Modulation(PWM
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "PWM"
description "Pulse Width Modulation"

\end_inset

) signal as an input that controls the amount of power transmitted to the
 motor and ultimately dictates the angular velocity of the motor.
 The higher angular velocity of the motor will correlate to a higher amount
 of thrust generated by the respective rotor.
 ESCs are also capable of regulating the amount of voltage.
 The ESC receives PWM control signals from an on-board Radio Frequency(RF
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "RF"
description "Radio Frequency"

\end_inset

) receiver or an auto-pilot system 
\begin_inset CommandInset citation
LatexCommand cite
key "BRUSHLESSMOTOR"

\end_inset

.
 ESCs specifically designed for brush-less motors are required to be used.
 Brush-less ESC platforms drive brush-less motors through the transmission
 of a sequence of signals for rotation.
 
\end_layout

\begin_layout Standard
The amount of torque generated by the brush-less motors is defined as 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\tau=K_{t}(I-I_{0)})\label{eq:motor torque}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $\tau$
\end_inset

 is the motor torque, 
\begin_inset Formula $I$
\end_inset

 is the input current, 
\begin_inset Formula $I_{0}$
\end_inset

 is the current when there is no load on the motor, and 
\begin_inset Formula $K_{t}$
\end_inset

 is the torque proportionality constant 
\begin_inset CommandInset citation
LatexCommand cite
key "gibianksyl"

\end_inset

.The torque proportionality constant can be viewed as the amount of torque
 a certain brush-less motor can produce under a given current.
 
\end_layout

\begin_layout Section
Current Swarm Research
\end_layout

\begin_layout Standard
Recently, GRASP laboratory of University of Pennsylvania has constructed
 a swarm of agile micro quadrotors 
\begin_inset CommandInset citation
LatexCommand cite
key "GRASP"

\end_inset

.
 In the research conducted under the GRASP laboratory, micro quadrotors
 were utilized.
 Each participating micro quadrotor is outfitted with a flight control board,
 Electronic Speed Control motors, power supply, and ZigBee protocol transceivers
 as depicted in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Micro-Quadrotor-Prototype-GRASP"

\end_inset

 from 
\begin_inset CommandInset citation
LatexCommand cite
key "GRASP"

\end_inset

.
 The main flight control board on the micro quadrotor platform is an ARM
 Cortex-M3 processor with a 72 MHz clock frequency.
 To enable accurate maneuverability, the flight control board is equipped
 with a 3-axis accelerometer, and a 2-axis 2,000 deg/s rate gyroscope for
 roll and pitch axis, and a single axis 500 deg/s rate gyroscope for the
 yaw axis.
 An on board barometer is also used to measure the current altitude of the
 micro quadrotor platform.
 The communication platform is comprised of two ZigBee transceivers that
 can operate at 900 MHz or 2.4 GHz.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/GRASP quadrotor platform.png

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Micro Quadrotor Prototype constructed by GRASP Laboratory of University
 of Pennsylvania 
\begin_inset CommandInset citation
LatexCommand cite
key "GRASP"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:Micro-Quadrotor-Prototype-GRASP"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The general operation of the swarm of micro quadrotors constructed by GRASP
 laboratory, is based on a centralized coordination scheme.
 In GRASP laboratory's centralized coordination scheme, a fixed vision system
 that uses a Vicon motion capture system, senses the position of all participant
s within the swarm.
 The fixed vision system then streams position data of the participating
 quadrotors to a base station via gigabit Ethernet which in turn determines
 the appropriate swarm coordination.
 The base station uses a MATLAB-based process that coordinates movements
 within the swarm from processing the received position data of the fixed
 vision system, and developing respective movement commands for each participati
ng quadrotor.
 Movement commands are issued to the participating quadrotors every 10 milliseco
nds.
 Once the movement command is constructed for the appropriate participating
 quadrotor, the base station transmits the command to that quadrotor.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/system_level_arch_GRASP.png
	scale 74

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Overall System Architecture for Mini-Quadrotor Swarm Implementation
\begin_inset CommandInset citation
LatexCommand cite
key "GRASP"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:Overall-System-Architectue-GRASP"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Depicted in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Overall-System-Architectue-GRASP"

\end_inset

, the altitude, pitch, roll and yaw are controlled on the local control
 platform within the quadrotor, whereas, position feedback, and swarm coordinati
on are done within an off-board terminal outfitted with MATLAB.
 The vision system utilized within the swarm coordination provides feedback
 to the position controller within the system.
\end_layout

\begin_layout Standard
The swarm architecture implemented in the research conducted at GRASP laboratory
 uses a algorithm in where a team of quadrotors is organized into smaller
 groups.
 GRASP defines a group as a collection of participating quadrotors that
 work simultaneously to complete a single task.
 A team comprises of two or more groups that collaborate to complete an
 overall objective by completing parallel sub tasks 
\begin_inset CommandInset citation
LatexCommand cite
key "GRASP"

\end_inset

.
 The research assumes that participants within the group have the ability
 to communicate at higher data rates with lower latencies when compared
 to the communication established between groups.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/quadrotor_swarm_architecture_GRASP.png

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Highlight of the Team Approach in the Swarm Architecture Composed by GRASP
 Laboratory
\begin_inset CommandInset citation
LatexCommand cite
key "GRASP"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:swarm formation architecture-GRASP"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Experimental testing was done with four quadrotors following a certain trajector
y.
 The performance of the trajectory following was characterized through comparing
 the actual position of the quadrotors and the desired position of the quadrotor
s.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figs/GRASP_RESULTS.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Formation following for a four quadrotor trajectory.
 In a the colored lines represent the desired trajectories for each of the
 four vehicles and the black lines represent the actual trajectories.
 The errors are shown in (b).
 The black line represents the formation error from the desired trajectory
 and the colored lines represent the local errors for each quadrotor 
\begin_inset CommandInset citation
LatexCommand cite
key "GRASP"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:Formation-following-for-performance-GRASP"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The main strengths of the research proposed by GRASP laboratory are that
 the centralized coordination scheme allows for precise aerial maneuvers
 with high agility, and that swarm formations can be constructed with relative
 ease.
 The major drawback of the centralized coordination scheme is that the resulting
 swarm is confined to a certain region due to its dependence on an external
 vision system and base station as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Micro-Quadrotor-Swarm GRASP "

\end_inset

.
 This diminishes the flexibility of deployment for the swarm, thus limiting
 its applications.
 Therefore, there is a trade off for agility and speed of swarm formation
 with deployment flexibility.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/micro-quadrotor-swarm-GRASP.png

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Micro Quadrotor Swarm Constructed by GRASP Laboratory of University of Pennsylva
nia 
\begin_inset CommandInset label
LatexCommand label
name "fig:Micro-Quadrotor-Swarm GRASP "

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Another quadrotor swarm proposed in 
\begin_inset CommandInset citation
LatexCommand cite
key "basiri2013audio"

\end_inset

, utilizes acoustic signaling to establish quadrotor localization and facilitate
 swarm behavior.
 In the work completed in 
\begin_inset CommandInset citation
LatexCommand cite
key "basiri2013audio"

\end_inset

,the relative positioning between participants in a Micro-Air-Vehicle (
 MAV) swarm are obtained through the use of coherence testing with an on-board
 acoustic based system.
 The method proposed by the work in
\begin_inset CommandInset citation
LatexCommand cite
key "basiri2013audio"

\end_inset

 uses a microphone array to determine the direction of arrival of an acoustic
 pulse.
 There are two types of MAV functionality within the swarm.
 The first type of MAV is the “Target” MAV.
 The responsibility of the Target MAV is to transmit an acoustic signal
 to the nearby MAVs for reception 
\begin_inset CommandInset citation
LatexCommand cite
key "basiri2013audio"

\end_inset

 .
 The acoustic signal transmitted by the Target MAV is referred to as a “chirp”,
 and has a predefined rate and frequency 
\begin_inset CommandInset citation
LatexCommand cite
key "basiri2013audio"

\end_inset

 .
 Each MAV that is behaving as a “Target” has a exclusive chirp with a specified
 frequency pattern and periodic rate.
 The chirp is generated by a piezoelectric speaker on the MAV platform 
\begin_inset CommandInset citation
LatexCommand cite
key "basiri2013audio"

\end_inset

 .
 
\end_layout

\begin_layout Standard
The other type of functionality is the “Perceiving” MAV.
 The perceiving MAV is responsible for detecting a full chirp signal, and
 determining the orientation of arrival of the chirp signal.
 To capture the chirp signal, the perceiving MAV uses a microphone array
 mounted on the MAV platform 
\begin_inset CommandInset citation
LatexCommand cite
key "basiri2013audio"

\end_inset

 .
 The microphone array is composed of four microphones in a tetrahedral geometry
 in order to localize sounds in 3D-space 
\begin_inset CommandInset citation
LatexCommand cite
key "basiri2013audio"

\end_inset

 .
 The microphones in the array simultaneously measure the acoustic field
 at multiple points in space.
 The fractional Fourier transform is computed for each of the received acoustic
 signals in the array 
\begin_inset CommandInset citation
LatexCommand cite
key "basiri2013audio"

\end_inset

 .
 The received acoustic signals, or chirps are then compared with each other
 and the time delay is measured among them.
 Based on the time difference of arrival among the microphones in the array,
 and the predefined geometry of the microphone array, the bearing of the
 direction of arrival of the acoustic signal can be established 
\begin_inset CommandInset citation
LatexCommand cite
key "basiri2013audio"

\end_inset

 .
 Using the direction of arrival of the acoustic signal, the relative position
 of the “Target” MAV is established.
 This relative position is used for participant localization within the
 swarm, and transmitted to a ground station for processing and swarm coordinatio
n 
\begin_inset CommandInset citation
LatexCommand cite
key "basiri2013audio"

\end_inset

.
 A drawback of this system is found within the noise introduced into the
 audio based positioning system that was contributed by the acoustic noise
 generated by the MAV.
 The higher the acoustic noise of the MAV, the lower the signal to noise
 ratio will be.
 Other noise sources could be in the form of acoustic signal contribution
 from the environment with multiple acoustic sources.
 This restricts the current swarm to environments with relatively low acoustic
 noise in respect to the piezoelectric speakers utilized within the system.
 
\end_layout

\begin_layout Standard
The quadrotor swarm proposed in 
\begin_inset CommandInset citation
LatexCommand cite
key "yu2013formation"

\end_inset

, a base station is used record the state of the participating quadrotors,
 and issue movement commands, whereas a Global Positioning System (GPS)
 is used to establish quadrotor localization within the swarm.
 The research conducted in 
\begin_inset CommandInset citation
LatexCommand cite
key "yu2013formation"

\end_inset

 provides a formation control algorithm that is utilized to maintain the
 geometric integrity of the swarm.
 A base station is then used to send control commands are sent to specified
 quadrotors or broadcast to the entire swarm for swarm movement.
 The swarm topology used within 
\begin_inset CommandInset citation
LatexCommand cite
key "yu2013formation"

\end_inset

 comprised of three quadrotor nodes and one ground station.
 The flight control system developed in 
\begin_inset CommandInset citation
LatexCommand cite
key "yu2013formation"

\end_inset

 utilizes three one-axis gyroscopes, one three-axis accelerometer, one three-axi
s magnetometer, and a Global Positioning System (GPS) to establish the orientati
on and localization of the quadrotor platform.
 The flight control system uses the localization measurements to characterise
 the quadrotor platform’s orientation dynamics in a double integrator represente
d as a point-mass system as described in 
\begin_inset CommandInset citation
LatexCommand cite
key "yu2013formation"

\end_inset

, and performs necessary movements to maintain the desired position of the
 quadrotor platform within the swarm.
 The quadrotor orientation dynamics of the quadrotor platform are transmitted
 to neighboring quadrotors so that their formation controllers can compensate
 for the location of the current quadrotor platform and maintain the desired
 geometry of the swarm as explained in 
\begin_inset CommandInset citation
LatexCommand cite
key "yu2013formation"

\end_inset

.
 The ground station used in 
\begin_inset CommandInset citation
LatexCommand cite
key "yu2013formation"

\end_inset

 is based on Labview 8.2.1 within a Windows XP environment.
 The current state of all quadrotors are transmitted to the base station
 via the communication medium established by the ZigBee network, and movement
 commands can be transmitted to individual quadrotors in order to facilitate
 quadrotor swarm movement.
 The drawback of the research conducted in 
\begin_inset CommandInset citation
LatexCommand cite
key "yu2013formation"

\end_inset

 is the reliance of a GPS module to help facilitate localization of quadrotor
 participants within the swarm.
 Due to this reliance, the quadrotor swarm must be deployed in an environment
 that contains a GPS signal for localization.
 
\end_layout

\begin_layout Standard
In the research conducted in 
\begin_inset CommandInset citation
LatexCommand cite
key "alvissalim2012swarmtelecom"

\end_inset

, quadrotor swarm formations are utilized in order to establish ad-hoc communica
tion over a coverage area in order to provide telecommunication accessibility
 to clients within that area.
 The quadrotor nodes used within the research conducted in 
\begin_inset CommandInset citation
LatexCommand cite
key "alvissalim2012swarmtelecom"

\end_inset

, was based on the Parrot ARDrone platform.
 This platform incorporates a Global Positioning System (GPS) module and
 an Inertial Measurement Unit(IMU) in order to establish localization within
 the swarm.
 The IMU is responsible for measuring the degree of rotation for the roll,pitch,
yaw, and altitude.
 The measurements from the GPS and IMU are utilized to establish localization
 within the swarm.
 The ARDrone platform uses the Robot Operating System(ROS), which is a specializ
ed computing environment that provides pre defined software algorithms for
 processing the navigation data constructed by the GPS and on board IMU.
 In the swarm, each quadrotor node carries an Internet Protocol (IP) address.
 The purpose of the swarm in 
\begin_inset CommandInset citation
LatexCommand cite
key "alvissalim2012swarmtelecom"

\end_inset

 is to provide a wireless network link between two communication points
 (ex.
 communication tower,access point).
 The formation of the swarm within
\begin_inset CommandInset citation
LatexCommand cite
key "alvissalim2012swarmtelecom"

\end_inset

 is established through the construction of point-to-point movement commands
 generated from the localization of the quadrotors through IMU and GPS measureme
nts.
 The measurements from the IMU and GPS on the quadrotor node are wirelessly
 transmitted to a base station, and movement commands are generated for
 the quadrotor node.
 This process is conducted for all participating nodes.
 At the initialization of the swarm, the quadrotor nodes have a pre-determined
 point-to-point movement commands in order to produce a initial swarm geometry
 as discussed in 
\begin_inset CommandInset citation
LatexCommand cite
key "alvissalim2012swarmtelecom"

\end_inset

.
 After the quadrotor node moves to the specified position, it initiates
 an auto-hover routine to maintain its current position.
 The paper discusses a PID concept that is used to ensure that the quadrotor
 node remains in its respective position within the swarm.
 The quadrotor node maintains its current position until new movement commands
 are received from the base station.
 The base station contains ARDrone software functions that are used for
 the calculation of desired point-to-point movement commands for the quadrotor
 nodes.
 The quadrotor platform contains ARDrone software functions to decompose
 the movement commands sent from the base station into the necessary movement
 vectors in order to perform movement to the desired location.
 The strength of the swarm system conducted in 
\begin_inset CommandInset citation
LatexCommand cite
key "alvissalim2012swarmtelecom"

\end_inset

 is the accuracy of the position of the quadrotor nodes within the quadrotor
 swarm.
 The work in 
\begin_inset CommandInset citation
LatexCommand cite
key "alvissalim2012swarmtelecom"

\end_inset

 mentions that the accuracy of quadrotor movement has a tolerance of 50
 centimeters in respect to the desired position.
 This is due to the GPS module in conjunction with the IMS platform used
 to establish the location of the node, and the PID controller used to establish
 accurate position maintenance (auto-hovering) of the quadrotor platform
 while residing at the desired location.
 The major drawback of this swarm system presented in 
\begin_inset CommandInset citation
LatexCommand cite
key "alvissalim2012swarmtelecom"

\end_inset

 is the deployment flexibility of the swarm.
 The swarm can only be deployed in the presence of a moderate strength GPS
 signal in order to effectively obtain the localization of the quadrotor
 participants and maintain the geometry of the swarm.
 Another drawback within the swarm is the necessity to have a base station
 issue the desired movement positions to the participants of the swarm via
 wireless communication in order to move the swarm as a whole.
 This requires the swarm to be within an acceptable distance of the base
 station in order to establish a communication link with a moderate quality
 of service.
 
\end_layout

\begin_layout Standard
In the research conducted in 
\begin_inset CommandInset citation
LatexCommand cite
key "saska2014swarms"

\end_inset

, a control technique for directing swarms of autonomous quadrotor vehicles
 is proposed.
 The control technique constructed in 
\begin_inset CommandInset citation
LatexCommand cite
key "saska2014swarms"

\end_inset

 was based off a visual relative localization of the swarm participants.
 The vision system utilized for relative localization within the swarm incorpora
ted a camera system mounted on one quadrotor that analyzes a black and white
 patterned beacon on another participating quadrotor.
 The work in 
\begin_inset CommandInset citation
LatexCommand cite
key "saska2014swarms"

\end_inset

 shows that the operational distance of the vision system was up to 5.5 meters.
 The overall swarm algorithm utilized within the work of 
\begin_inset CommandInset citation
LatexCommand cite
key "saska2014swarms"

\end_inset

 was inspired by the Reynold’s boid model in 
\begin_inset CommandInset citation
LatexCommand cite
key "reynolds1987flocks"

\end_inset

.
 This model examined the swarm behavior of schools of fish in nature.
 The stabilization of the swarm in 
\begin_inset CommandInset citation
LatexCommand cite
key "saska2014swarms"

\end_inset

 followed the rules of separation and cohesion found in the boid model.
 The separation rule is used to avoid crowding within the swarm, and establish
 a repulsion method to avoid collisions within the swarm 
\begin_inset CommandInset citation
LatexCommand cite
key "saska2014swarms"

\end_inset

.
 The cohesion rule of the BOID model discussed in 
\begin_inset CommandInset citation
LatexCommand cite
key "reynolds1987flocks"

\end_inset

 was used to enable stabilization of the swarm through the use of relative
 localization and prevent quadrotor nodes from moving too far away from
 the swarm.
 Each participant within the swarm obtains the relative positions of its
 neighbors.
 The relative position of the surrounding neighbors are then employed in
 the feedback of the quadrotor control system in order to influence the
 movement of the quadrotor participant.
 While utilizing the rules of separation and cohesion within the boid model,
 the quadrotor participant will always attempt to maintain a specific distance
 in relation to the neighboring quadrotors.
 If a neighbor moves closer to the participant, the participant will move
 away in order to maintain the predefined target distance.
 The same is true in the situation of a neighboring node moving away from
 the participant 
\begin_inset CommandInset citation
LatexCommand cite
key "saska2014swarms"

\end_inset

.
 Utilizing this behavior, the movements of quadrotors are propagated through
 the entire swarm 
\begin_inset CommandInset citation
LatexCommand cite
key "saska2014swarms"

\end_inset

.
 This swarm method relinquishes the need for communication between participating
 nodes.
 A drawback of the swarm system constructed in 
\begin_inset CommandInset citation
LatexCommand cite
key "saska2014swarms"

\end_inset

 is that of stability.
 In order to maintain stability of the swarm, each participating node will
 need to be within a certain distance with its neighbor in order for the
 vision system to successfully establish the relative location of the neighbor.
 Therefore, the capabilities of the vision system used will influence the
 distance between participants in a stable quadrotor swarm.
 With a vision system that has a small range of detection, the distance
 between each of the participants will need to be small as well.
 If the participants of the swarm are at a distance beyond the performance
 capabilities of the vision system, instability will occur, leading to flight
 collisions.
 
\end_layout

\begin_layout Standard
In the research conducted in 
\begin_inset CommandInset citation
LatexCommand cite
key "vasarhelyi2014outdoor"

\end_inset

, a swarm formation was established through the use of Reynold’s flock formation
 model 
\begin_inset CommandInset citation
LatexCommand cite
key "reynolds1987flocks"

\end_inset

.
 The responsibilities of all participants within the swarm are to perform
 short-range repulsion from neighbors, medium-range velocity alignment with
 neighbors, and the a global positioning constraint in order to remain in
 the relative vicinity of the swarm 
\begin_inset CommandInset citation
LatexCommand cite
key "vasarhelyi2014outdoor"

\end_inset

.
 In order to facilitate this functionality, a platform that contains a three
 dimensional gyroscope, a three dimensional accelerometer, a GPS receiver,
 a 2.4GHz XBee transceiver, and a GumStix Overo Water mini-computer was construct
ed in 
\begin_inset CommandInset citation
LatexCommand cite
key "vasarhelyi2014outdoor"

\end_inset

.
 The flight controller of the quadrotor platform, which was responsible
 for maintaining correct orientation in roll, pitch, yaw, and altitude,
 was connected to the “FlockControl” board via Serial Peripheral Interface
 
\begin_inset CommandInset citation
LatexCommand cite
key "vasarhelyi2014outdoor"

\end_inset

.
 The “FlockControl” board utilized the bearing information from the flight
 controller in conjunction with the GPS module to obtain the position,velocity,
 altitude and status of the quadrotor 
\begin_inset CommandInset citation
LatexCommand cite
key "vasarhelyi2014outdoor"

\end_inset

.
 This “FlockControl” board transmits this information to the surrounding
 neighbors within the swarm.
 Utilizing the transmitted information, the neighbors within the swarm performs
 movements based on the principles described in Reynold’s flock algorithm
 as described in 
\begin_inset CommandInset citation
LatexCommand cite
key "vasarhelyi2014outdoor"

\end_inset

.
 The swarm algorithm proposed in 
\begin_inset CommandInset citation
LatexCommand cite
key "vasarhelyi2014outdoor"

\end_inset

 only works for up to ten participants.
 A drawback of this swarm algorithm is the reliance of a GPS signal to establish
 the location of each participant of the swarm.
 This requires the swarm to be within an environment that facilitates a
 suitable GPS signal.
 
\end_layout

\begin_layout Chapter
Quadrotor Platform Used
\end_layout

\begin_layout Section
Hardware Architecture of Quadrotor Platform 
\end_layout

\begin_layout Subsection
Quadrotor Frame 
\end_layout

\begin_layout Standard
The quadrotor frame used during this research was the ST360 model.
 This model was packaged with 
\end_layout

\begin_layout Itemize
4 x ST2210 Brushless Motors 
\end_layout

\begin_layout Itemize
4 x 8045 Propellers 
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Width
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
360mm
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Height 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
90mm
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Weight
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
170g (without added electronics)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Mechanical Specifications of the ST360 model
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Quadrtoror Power Supply
\end_layout

\begin_layout Standard
The power supply used for the quadrotor platform was a 3-cell lithium-polymer
 battery with a 2200mAh capacity and a nominal voltage of 11.1V.
 The desired maximum flight time for the quadrotor was determined to be
 10 minutes.
 Using this information, the amount of current draw that the quadrotor can
 safely operate can be determined through the following relationship.
 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
I_{op}=\frac{CAP_{BAT}}{T_{OP}}s\label{eq:Quadrotor Operating Current}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Where 
\begin_inset Formula $CAP_{BAT}$
\end_inset

is the battery's current capacity, 
\begin_inset Formula $T_{OP}$
\end_inset

is the desired operating time, and 
\begin_inset Formula $I_{OP}$
\end_inset

is the operating current of the battery.
 With a desired flight time of 10 minutes, and a battery capacity 2200 milli
 amp hours (mAh), the operating current was determined as 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
I_{OP}=\frac{2200mAh}{0.1667}=13200mA\label{eq: Operating Current Imp}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
This operating current of 13.20 amperes was one of the factors used to help
 determine the type of motors that will suffice for the quadrotor.
 The other factor that had to be accounted for is the potential thrust that
 the quadrotor platform can produce with the 8045 propellers.
 Based on momentum theory, the relationship that characterizes the thrust
 of the motor and propellers can be determined as
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
T=\frac{\pi}{4}D^{2}pv\triangle v\label{eq:Thrust of Quadrotor Propellers}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where T is the thrust exerted, D is the diameter of the propeller, 
\begin_inset Formula $p$
\end_inset

 is the density constant of the atmosphere( in this case, the density of
 air at an altitude lower than 20m), 
\begin_inset Formula $v$
\end_inset

 is the velocity of the air near the propeller, and 
\begin_inset Formula $\triangle v$
\end_inset

 is the velocity of the air accelerated by the propeller.
 The air in the surronding atmosphere will typically have a velocity that
 is half of the velocity of the air being accelerated by the propeller.
 Therefore, the thrust relationship can be simplified into the following
 relationship
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
T=\frac{\pi}{8}D^{2}p\triangle v\label{eq: Simplified Thrust of Quadrotor Propellers}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
The velocity of the air being accelerated by the propeller was determined
 as 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\triangle v=\frac{2P}{T}\label{eq:Velocity of Air Being Accelerated by Propeller}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where P is the power transmitted to the rotors.
 This value was determined to be 24 watts.
 Substituting the velocity of air being accelerated by the propellers into
 the overall thrust relationship yields Equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Thrust in Terms of Power Delievered to Rotors"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
T=\left[\frac{\pi}{2}D^{2}pP^{2}\right]^{1/3}\label{eq:Thrust in Terms of Power Delievered to Rotors}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $p$
\end_inset

 is the density constant of the atmosphere (air in this case) and P is the
 power transmitted to the rotor.
 The diameter of the propellers used in this research was 8 inches.
 The density constant of the atmosphere is 1.225, and the power transmitted
 to the rotor and propeller was 24 watts.
 Using this information, and Newton's second law 
\begin_inset Formula $T=ma$
\end_inset

, where T is the torque applied(force), m is the mass of the body, and a
 is the acceleration(gravity in this case), the static thrust in terms of
 mass can be calculated as shown in Equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Static Thrust in Terms of Mass"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
m=\frac{\left[\frac{\pi}{2}8^{2}*1.225*24watts^{2}\right]^{1/3}}{9.81}=364.53grams\label{eq:Static Thrust in Terms of Mass}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Where, m is the mass that can be supported.
 The static thrust of each propeller was determined to be capable of lifting
 364.53 grams at a propeller speed of 10000 rotations per minute.
 Therefore the quadrotor platform will theoretically be able to support
 a weight of 1458.12 grams.
 This served as a baseline for the weight limit of the platform, including
 the quadrotor frame, electronic equipment, and payload.
 The motor used within the research (shown in section 3.1.0.3) fits within
 the specifications of operating current, and will provide more than enough
 thrust to the quadrotor platform.
 
\end_layout

\begin_layout Subsection
Motors 
\end_layout

\begin_layout Standard
The motor used is the ST2210 brushles motor.
 This motor has the potential to produce 600 grams of thrust at 1050 Rotations
 Per Minute(RPM
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "RPM"
description "Rotations Per Minute"

\end_inset

) per volt.
 With the power supply chosen, the motor can produce a maximum of 115500
 RPM.
 Brushless Electronic Speed Controllers(BESC
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "BESC"
description "Brushless Electronic Speed Control"

\end_inset

) are used to modulate the speed of the brushless motors.
 Pulse Width Modulation(PWM
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "PWM"
description "Pulse Width Modulation"

\end_inset

) signals from a control board are used to modulate the amount of speed
 for the BESC.
 Note that brushless ESCs can only be used with these motors.
 This is due to how the ESC powers the motor.
 Unlike brushed ESCs, brushless ESCs drive the brushless motor with a sequence
 of signals for rotation.
 
\end_layout

\begin_layout Subsection
Quadrotor Flight Control Board 
\end_layout

\begin_layout Standard
The flight controller board used is the All In One Pro (
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "AIOP"
description "All In One Pro"

\end_inset

)v2 board.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/AIOP V2.JPG
	scale 50

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
All In One Pro v2 Flight Controller Board Diagram
\begin_inset CommandInset citation
LatexCommand cite
key "AIOP"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

The AIOP v2 control board is a arduino based microcontroller that utilizes
 a ATMega 2560-16AU Microcontroller.
 It suppors 8-axis motor outputs, as well as support MPU6050 6 axis gyro
 / accel with Motion Processing Unit , and MS5611-01BA03 high precision
 altimeter for altitude, yaw, roll, and pitch calculations
\begin_inset CommandInset citation
LatexCommand cite
key "AIOP"

\end_inset

.
 
\end_layout

\begin_layout Section
Software Architecture of Quadrotor Platform
\end_layout

\begin_layout Subsection
Flight Control Software
\end_layout

\begin_layout Standard
The firmware used with the AIOP v2 flight control board is the MegaPirateNG
 firmware.
 This firmware provides the framework for the Closed Loop Feedback control
 system used to fly the quadrotor.
 The MegaPirateNG is arduino based, and the following procedure was used
 to upload the firmware to the AIOP flight controller.
 This procedure assumed that MegaPirateNG firmware has already been downloaded
 from the supported site and are using a Windows machine.
 
\end_layout

\begin_layout Itemize
Download the latest Arduino environment from the official site.
 
\end_layout

\begin_layout Itemize
The libraries of the MegaPirateNG firmware was then copied into the libraries
 folder located under the Arudino folder in the C:/ drive.
 
\end_layout

\begin_layout Itemize
With the AIOP v2 board connected to the Windows machine via Universal Serial
 Bus(
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "USB"
description "Universal Serial Bus"

\end_inset

), the MegaPirateNG firmware was uploaded to the board through selecting
 Arudino Mega 2560 under board in an open Arduino IDE, and running the Arducopte
r.pde file located in the MegaPirateNG folder.
\end_layout

\begin_layout Subsection
Flight Control User Interface
\end_layout

\begin_layout Standard
The flight control user interface used in the research was MissionPlanner.The
 flight control user interface gives the ability of tunning the quadrotor
 platform for better flight performance, as well as provide a method to
 choose a flight mode for the quadrotor platform.
 The MegaPriateNG firmware operates on a Proportional Integral Derivative
 (
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "PID"
description "Proportional Integral Deravative "

\end_inset

) controller.
 Tuning for quadrotor drift can be done through modifying the I value of
 the controller.
 Tuning for the responsiveness of the quadrotor can be done through modifying
 the P value of the PID controller as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Modifying-PID-values"

\end_inset

.
 The P and I values both depend on the characteristics of the quadrotor
 that is being flown.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/PIDmoddingMP.png
	scale 80

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Modifying PID values within MissionPlanner Interface
\begin_inset CommandInset label
LatexCommand label
name "fig:Modifying-PID-values"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Requirements and Desired Functionality of the Communication Platform
\end_layout

\begin_layout Standard
The purpose of the communication platform within the swarm is to provide
 a wireless medium to transmit and receive position data of the participating
 quadrotors and send movement commands to the entire swarm.
\end_layout

\begin_layout Section
XBee Platform 
\end_layout

\begin_layout Standard
The XBee platform used within this research was the XBee Series 2 platform.
 This platform is a low power, wireless transceiver that can be used for
 mesh networking solutions.
 The XBee platform follows a packet based transmission.
 The XBee platform is interfaced through a Universal Asynchronous Receiver/Trans
mitter(UART
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "UART"
description "Universal Asynchronous Receiver/Transmitter"

\end_inset

) serial interface.
 The UART serial interface is advantageous because it allows a UART equipped
 micro controller or processing unit to interface with the XBee platform
 with relative ease.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/xbee_series_2.png

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
XBee Series 2 Platform 
\begin_inset CommandInset citation
LatexCommand cite
key "xbeedatasheet"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
XBee Series 2 Specifications 
\end_layout

\begin_layout Standard
The RF performance characteristics of the XBee Series 2 platform is depicted
 in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:RF-Performance-Specifications"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Indoor Operating Range
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
up to 40 meters
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Outdoor Operating Range
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
up to 120 meters (line-of-sight)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RF Data Rate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
250,000 bits per second 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reception Sensitivity 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-95 dBm
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operating Frequency
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.4 GHz
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frequency Channels 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
RF Performance Specifications for XBee Series 2 Platform.
\begin_inset CommandInset label
LatexCommand label
name "tab:RF-Performance-Specifications"

\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "xbeedatasheet"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The XBee Series 2 platform operates within the 2.4 GHz Industrial Scientific
 Medical (ISM
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "ISM"
description "Industrial Scientific Medical"

\end_inset

) band.
 This allows license free deployment and operation of the XBee platform.
 The antenna used within the XBee platform is a integrated whip that is
 etched onto the platform.
 
\end_layout

\begin_layout Standard
The power specifications of the XBee Series 2 platform is depicted in Table
 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Power-Specfications-for Xbee S2"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Supply Voltage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.8 -3.4 Volts
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operating Current(RF Transmission)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
40mA(@ 3.3Volts)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operating Current(Receive)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
40mA(@ 3.3 Volts)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Power-down Current
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<1 uA
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Power Specifications for XBee Series 2 Platform
\begin_inset CommandInset label
LatexCommand label
name "tab:Power-Specfications-for Xbee S2"

\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "xbeedatasheet"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
XBee Series 2 Module Interfacing
\end_layout

\begin_layout Standard
The XBee module is interfaced through a logic-level asynchronous serial
 interface.
 The pin connections utilized on the XBee platform is depicted in Table
 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Relevant-Pin-Mapping for Xbee S2"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pin #
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pin Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Logic Direction
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pin Description 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
VCC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Voltage for Power Supply
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DOUT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Output
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Logic Level Pin for Data Transmission
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DIN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Input
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Logic Level Pin for Data Reception 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GND
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ground for entire XBee Platform 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Relevant Pin Mapping of XBee Series 2 Platform Used in Research 
\begin_inset CommandInset label
LatexCommand label
name "tab:Relevant-Pin-Mapping for Xbee S2"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As depicted in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Relevant-Pin-Mapping for Xbee S2"

\end_inset

, the serial interface is established with pins 2 and 3 for data transmission
 and data reception respectively.
 Data that is to be transmitted through RF propagation by the XBee module
 is sent in a serial fashion through pin 3 (DIN), whereas data that has
 been received by the XBee module can be accessed through pin 2 (DOUT).
 The data sent through the DIN pin should be sent in bursts known as packets.
 The structure of such a packet is depicted in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Signal-Waveform-of-UART-datapacket"

\end_inset

.
 When the transmission line is idle (i.e.nothing is transmitted) the pin should
 receive a constant high logic level.
 The start delimiter of the UART packet is a single bit a logic level low.
 The payload of the packet follows immediately after the start delimiter.
 The maximum size of the payload is 1 byte (8 bits).
 After the last bit of the data payload is transmitted, a stop bit immediately
 follows.
 This stop bit is logic level high.
 There is no utilization of bit parity within the UART protocol for the
 XBee platform configured for this research.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/UART Packet Xbee S2.png
	scale 90

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Signal Waveform of UART Data Packet Configured for XBee Series 2 Module
 
\begin_inset CommandInset label
LatexCommand label
name "fig:Signal-Waveform-of-UART-datapacket"

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "xbeedatasheet"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The serial characters that are sent to the DIN (Pin 3) line, will be stored
 into a serial receive buffer until it can be processed into a RF data stream
 for transmission.
 Likewise, when a RF data stream is captured by the XBee module, it is stored
 in a RF receive buffer until the stream can be processed into a baseband
 signal, and eventually a UART data stream.
 This UART data stream will then be available at the DOUT will be stored
 in the Serial Transmit Buffer until the RF reception is complete.
 However, if the Serial Transmit Buffer becomes full in such that all of
 the data within the incoming RF packet cannot fit within the buffer, the
 whole packet will be dropped, and another attempt at receiving the RF packet
 will be necessary.
 The contents of the Serial Transmit Buffer will be available at the DOUT
 (pin 2) line.
 Such a depiction of this data flow is in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Transmit-and-Receive-UART-dataflow"

\end_inset

.
 The XBee platform cannot receive and transmit RF data concurrently.
 Therefore if serial data is sent to the DIN pin while the XBee module is
 receiving RF data.
 The serial data will reside in the Serial Transmit Buffer until RF data
 has finished being obtained by the module.
 When this occurs, the serial data in the Serial Transmit Buffer will be
 processed into a RF stream, and propagated onto the RF link via the embedded
 antenna.
 The Serial Receive Buffer size is 202 bytes.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/UART Data Flow XbeeS2.png
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Transmit and Receive Data Flow for XBee Series 2 Platform 
\begin_inset CommandInset label
LatexCommand label
name "fig:Transmit-and-Receive-UART-dataflow"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
ZigBee Networks
\end_layout

\begin_layout Standard
ZigBee is a networking protocol that XBee Series 2 modules utilize.
 A ZigBee network is a Personal Area Network (PAN
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "PAN"
description "Personal Area Network"

\end_inset

) that consists of one coordinator, multiple routers and/or end devices.
 The first type of device within a ZigBee network is the Coordinator device.
 To construct a PAN, the coordinator must have a frequency channel and PAN
 ID selected on startup 
\begin_inset CommandInset citation
LatexCommand cite
key "xbeedatasheet"

\end_inset

.
 These parameters can be set while in Command mode on the XBee platform
 (Detailed in XBee Series 2 Module Operation Modes).
 Once the PAN is established, other devices may join the PAN.
 However, in order for these devices to join the PAN, the PAN ID of the
 devices must match the PAN ID of the desired PAN to join.
 Once a device joins the PAN, a 16-bit network address will be assigned
 to it.
 Once this 16-bit address is assigned, the device can transmit/receive data
 with other participating devices within the PAN.
 The network address of the coordinator will always be 0.
 A XBee module can be configured to be a coordinator through setting the
 
\begin_inset Quotes eld
\end_inset

CE
\begin_inset Quotes erd
\end_inset

 parameter while in Command Mode.
 There can only be one Coordinator per PAN.
\end_layout

\begin_layout Standard
The second type of device within a ZigBee network, is the Router device.
 This device is an intermediate node that can route/relay data from other
 devices.The Router device also has the ability to allow other devices to
 join the PAN, and can assist in routing data throughout the PAN.
 When the Router device allows a device to join, it establishes a parent/child
 relationship in where the newly joined device is the child, and the Router
 device that the new device joined under, is the parent device 
\begin_inset CommandInset citation
LatexCommand cite
key "xbeedatasheet"

\end_inset

.
 This relationship holds true when a device joins under the Coordinator
 device as well.
 As a parent device, the Router device (or Coordinator device) can route
 data on behalf of a child device to ensure it reaches the correct destination.
 
\end_layout

\begin_layout Standard
The third type of device within the ZigBee network is the End device.
 End devices can only communicate to the parent (Router device or Coordinator
 device) of which it joined.
 Therefore, it does not have routing capabilities like the Router device
 and Coordinator device.
 End devices also do not have the capability of allowing new devices to
 join the PAN.
 End devices however, are the only devices that can operate in the Low Power
 mode.
\end_layout

\begin_layout Standard
A depiction of a typical ZigBee network is in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Zigbee-Network-Topology"

\end_inset

.
 In Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Zigbee-Network-Topology"

\end_inset

, the Router devices and Coordinator are located at the vertices of the
 PAN network, which allows them to route data to different regions of the
 network.
 However the expansion of the PAN is dis continued at the End devices.
 If the a new device wishes to join the network, it must join under the
 Coordinator device or a available Router device of that PAN.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/zigbee network.png
	scale 80
	clip

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
ZigBee Network Topology
\begin_inset CommandInset label
LatexCommand label
name "fig:Zigbee-Network-Topology"

\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "xbeedatasheet"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The ZigBee protocol is a upper layer protocol that handles the networking,
 transportation, presentation and application layers of communication of
 XBee platforms.
 This protocol was constructed in order to compliment the Institute of Electrica
l and Electronics Engineers(IEEE
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "IEEE"
description "Institute of Electrical and Electronics Engineers\\\\"

\end_inset

) 802.15.4 protocol as depicted in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ZigBee802.15.4-OSI-Model"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/ZigBee_802-15-4-OSI.png
	scale 60

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
ZigBee/802.15.4 OSI Model
\begin_inset CommandInset label
LatexCommand label
name "fig:ZigBee802.15.4-OSI-Model"

\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "ZIGBEENETWORKS"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ZigBee802.15.4-OSI-Model"

\end_inset

, the IEEE 802.15.4 protocol is responsible for the physical, Media Access
 Control(MAC
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "MAC"
description "Medium Acess Control\\\\"

\end_inset

), and the Logical Link Control (LLC
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "LLC"
description "Logical Link Control"

\end_inset

) of the XBee platform, whereas the ZigBee protocol is responsible for the
 higher levels of the communication stack such as the networking layer,
 transport layer, and application layer.
 
\end_layout

\begin_layout Standard
The physical layer as defined by 802.15.4 supports the frequency range of
 2.40 GHz to 2.42 GHz.
 This band is divided into 16 different channels, in which a PAN can occupy.
 The supported bit rate of 802.15.4 is 250 Kb/s 
\begin_inset CommandInset citation
LatexCommand cite
key "ZIGBEENETWORKS"

\end_inset

.
 The modulation scheme used within this particular XBee model (XBee Series
 2) is Direct Sequence Spread Spectrum (DSSS
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "DSSS"
description "Direct Sequence Spread Spectrum"

\end_inset

), Quadrature Phase Shift Keying (QPSK
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "QPSK"
description "Quadrature Phase Shift Keying"

\end_inset

)
\begin_inset CommandInset citation
LatexCommand cite
key "ZIGBEENETWORKS"

\end_inset

.
 DSSS allows the transmitted information to occupy a larger bandwidth with
 a lower spectral density for each signal when compared to a non DSSS signal
 as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:DSSS-Scheme-used-in-802154"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/802.15.4-DSSS.png
	scale 52

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
DSSS Scheme used in 802.15.4 PHY 
\begin_inset CommandInset label
LatexCommand label
name "fig:DSSS-Scheme-used-in-802154"

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "ZIGBEENETWORKS"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The DSSS scheme is advantageous in the sense that it reduces the interference
 between frequency channels within the frequency band.
 The 802.15.4 MAC utilizes the Carrier Sense Multiple Acess-Collision Avoidance
 (CSMA-CA
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "CSMA-CA"
description "Carrier Sense Multiple Access - Collision Avoidance"

\end_inset

).
 In CSMA-CA all participating nodes listen to the medium prior to transmit.
 If a node detects spectral energy on the medium that is higher than a certain
 threshold, the node will declare the medium is in use.
 When the node detects that the medium is in use, it waits for a random
 period of time, known as random-back off.
 After this period is up, the node will listen to the channel again in order
 to determine if the medium is not busy.
 If the medium is not busy, the node will transmit.
 If the node determines if the medium is still busy, it will increase the
 window for the random back off period, and retry transmission.
 This process will be repeated, with increasing the random back off period
 to a maximum pre-determined value, until the medium is determined as not
 busy.
 Combined with 802.11 LLC, the 802.15.4 supports star topology networks and
 peer-to-peer networks 
\begin_inset CommandInset citation
LatexCommand cite
key "ZIGBEENETWORKS"

\end_inset

.
 
\end_layout

\begin_layout Standard
The ZigBee protocol is an upper layer addition to 802.15.4 that essentially
 adds these contributions:
\end_layout

\begin_layout Itemize
Extra Security/Encryption Services (within the Transport Layer).
\end_layout

\begin_layout Itemize
Association and Authentication within the network layer( only valid nodes
 with correct PAN IDs can join the network).
\end_layout

\begin_layout Itemize
A reactive ad-hoc protocol (Ad-Hoc On Demand Routing 
\begin_inset CommandInset citation
LatexCommand cite
key "Perkins:2003:AHO:RFC3561"

\end_inset

) for data forwarding and routing.
\end_layout

\begin_layout Itemize
Unique Application Services such as clusters which are groups of nodes that
 are responsible for certain functions (i.e.
 light automation in a smart-home network).
 
\end_layout

\begin_layout Standard
When a XBee module configured as a Coordinator device powers on, it performs
 the following procedure 
\begin_inset CommandInset citation
LatexCommand cite
key "ZIGBEENETWORKS"

\end_inset

.
 
\end_layout

\begin_layout Enumerate
Perform a energy scan on multiple frequency channels to determine a unused
 frequency channel for the PAN.
\end_layout

\begin_layout Enumerate
Frequency channels with high detected energy levels are removed from considerati
on, and a list of low energy frequency channels remain.
 
\end_layout

\begin_layout Enumerate
Issue a 802.15.4 beacon request command on a low energy frequency channels.
 
\end_layout

\begin_layout Enumerate
If there are devices (Router or End Device) operating on the frequency channel
 on which a beacon request command was broadcasted, the devices respond
 with a beacon transmission that indicates the PAN ID of their operating
 PAN and if joining is allowed.
 If there is a device response with joining not allowed, the Coordinator
 will move to the next low energy frequency channel.
 
\end_layout

\begin_layout Enumerate
Repeat Steps 3 and 4 until a low energy frequency channel with no beacon
 response is found.
 
\end_layout

\begin_layout Standard
When a XBee module configured as a Router device is activated, it follows
 the following procedure for integrating into a PAN 
\begin_inset CommandInset citation
LatexCommand cite
key "ZIGBEENETWORKS"

\end_inset

.
 
\end_layout

\begin_layout Enumerate
Issue a 802.15.4 beacon request command on a frequency channel in order to
 identify local PANs.
 
\end_layout

\begin_layout Enumerate
Listen to the channel for a response.
 If there are devices operating on the certain frequency channel (nearby
 Coordinator devices or Router devices), they will respond to the 802.15.4
 beacon request issued by the new Router device with the PAN ID and the
 frequency channel that they are operating on.
 The Router determins if the valid PAN is found based on the PAN ID in the
 response of the nearby devices.
 In this research, the PAN ID of all established PANs are preset in the
 Coordinator's firmware.
 Therefore, the Router determines that the PAN ID is vailid if it matches
 the PAN ID parameter within its firmware.
 
\end_layout

\begin_layout Enumerate
If there is no response on the current frequency channel, repeat steps 2
 and 3 on the next frequency channel.
\end_layout

\begin_layout Enumerate
If a valid PAN ID is found, issue a join request to the device that sent
 the beacon response.
 
\end_layout

\begin_layout Enumerate
If joining is successful, the device the response to the join request will
 be a join confirmation.
\end_layout

\begin_layout Enumerate
The Router device is now within the PAN.
\end_layout

\begin_layout Standard
The process of a End Device joining a PAN is identical to the process of
 a Router device joining a PAN.
 However, once a End Device joins the network, no other devices can join
 as a child to the End Device.
\end_layout

\begin_layout Standard
Two address types are utilized within a ZigBee network.
 These address types are 16-bit network addresses, and 64-bit addresses.
 A 16-bit network address is assigned to a XBee node when it joins a PAN.
 Each XBee node within the PAN contains a unique 16-bit network address.
 The 16-bit network address of a node can change over time.
 The address can change if the XBee node leaves the PAN, then rejoins, or
 if the device type of the XBee node changes (ie.
 from Router device to End device) 
\begin_inset CommandInset citation
LatexCommand cite
key "xbeedatasheet"

\end_inset

.
 As discussed in the beginning of this section, the Coordinator of the PAN
 will always have a 16-bit network address of 0.
 The other address type is 64-bit addressing.
 Every XBee module has a unique 64-bit address.
 This address is permanant for the XBee module.
 
\end_layout

\begin_layout Subsection
AT Command Mode Operation
\end_layout

\begin_layout Standard
The command mode grants the ability to modify parameters within the firmware
 of the XBee Series 2 module.
 To enter the command mode on the XBee platform, the characters 
\begin_inset Quotes eld
\end_inset

+++
\begin_inset Quotes erd
\end_inset

 are sent to the DIN UART line.
 Upon successful reception, the XBee module will respond with 
\begin_inset Quotes eld
\end_inset

OK
\begin_inset Quotes erd
\end_inset

 on the DOUT UART line.
 Once this is received, parameters can be modified within the XBee firmware.
 The format for changing a parameter consists of having the characters 
\begin_inset Quotes eld
\end_inset

AT
\begin_inset Quotes erd
\end_inset

 and the characters of the parameter name assigned to a value.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:AT-Command-Format"

\end_inset

 shows an example of setting the Destination Low address of the XBee module
 to 2F.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

AT<ASCII Command><Carriage Return>
\end_layout

\begin_layout Plain Layout

ex.
 ATDL2F<CR>
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
AT Command Format 
\begin_inset CommandInset label
LatexCommand label
name "fig:AT-Command-Format"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

 If no command is sent through the UART interface within 3 seconds, the
 XBee module will automatically exit out of AT Command Mode.
 
\end_layout

\begin_layout Subsection
Transparent Operation
\end_layout

\begin_layout Standard
The most simplistic of the operation modes of the XBee Series 2 platform,
 transparent mode enables the XBee platform to transmit the raw serial character
s from the Serial Receive Buffer onto the RF link.
 The destination high and destination low addresses must be specified in
 the firmware of the XBee platform in order for a successful transmission/recept
ion to take place.
 Transparent operation allows the user to transmit data through the RF link
 without the specification of header information such as the destination
 address, packet size, and other packet information.
 The user simply transmits the character data through the DIN line and the
 XBee module will transmit it to the destination module specified by the
 destination high and destination low addresses in the module firmware.
 When in transparent operation and receiving RF data, the XBee module automatica
lly conditions the received RF packet into the raw character data that was
 received, and the received data will be available on the DOUT line.
 An example depicted in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:An-example-of transparent operation"

\end_inset

 shows what data needs to be present on the DIN line of the transmitting
 XBee module and what data that will be seen on the DOUT line of the receiving
 XBee module at the conclusion of the transmission.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/transparent_mode_xbee_example.png
	scale 50

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
An example of Data Transmission Scheme in Transparent Operation 
\begin_inset CommandInset label
LatexCommand label
name "fig:An-example-of transparent operation"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sample-Python-Script for Transparent Operation"

\end_inset

 shows Python scripting that would be programmed into the UART compatible
 microprocessor for sending data through UART to the transmitting XBee module
 (Transmission Process in Python Scripting), and Python scripting that would
 be programmed to the UART compatible microprocessor for receiving data
 through the UART from the receiving XBee module ( Reception Process in
 Python Scripting).
 It can be shown from the Transmission Process in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sample-Python-Script for Transparent Operation"

\end_inset

 does not require any packet formation/construction.
 Only the data payload, 'A' , must be sent to the XBee module for RF transmissio
n.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,breaklines=true"
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##########Transmission Process in Python Scripting###########
\end_layout

\begin_layout Plain Layout

self.ser_conn = ser.Serial(port = serialport,baudrate=baudrate,stopbits =
 1,parity = 'N',bytesize = 8,)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

self.ser_conn.write('A') # Transmit the character 'A' to the XBee Module for
 RF transmission.
 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

########## Reception Process in Python Scripting##########
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

self.ser_conn = ser.Serial(port = serialport,baudrate=baudrate,stopbits =
 1,parity = 'N',bytesize = 8,)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#See how many bytes are in the receive buffer.
          
\end_layout

\begin_layout Plain Layout

content_size_in_rx_buffer = self.ser_conn.inWaiting()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

while content_size_in_rx_buffer:            
\end_layout

\begin_layout Plain Layout

	data_chunk = self.ser_conn.read(content_size_in_rx_buffer)             
\end_layout

\begin_layout Plain Layout

	content_size_in_rx_buffer -= len(data_chunk)             
\end_layout

\begin_layout Plain Layout

    received_data.extend(data_chunk)#string type
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sample Python Script for Microcontrollers used to Drive XBee Transmitting
 Module and XBee Receiving Module in Transparent Operation Mode 
\begin_inset CommandInset label
LatexCommand label
name "fig:Sample-Python-Script for Transparent Operation"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The maximum amount of data that can be transmitted at a single time by the
 XBee module while in Transparent mode is 72 bytes.
 While in Transparent mode, there can only be point to point communication
 established, as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:An-example-of transparent operation"

\end_inset

.
 This point to point communication link is defined by the destination high
 and destination low addresses specified (described in AT Command Mode section)
 within the firmware of the transmitting XBee module.
\end_layout

\begin_layout Subsection
Application Programming Interface(API
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "API"
description "Application Programming Interface"

\end_inset

) Mode
\end_layout

\begin_layout Standard
API operation mode is an alternative to the Transparent Operation.
 This operation is a frame-based protocol that gives the application the
 availablity to interact with networking capabilities of the the XBee module
 
\begin_inset CommandInset citation
LatexCommand cite
key "xbeedatasheet"

\end_inset

.
 This feature gives the user the flexibility of constructing more complex
 networks topologies that included multiple XBee modules, as well as the
 flexibility to perform broadcast/multicast transmissions.
 To enable API mode for the XBee module, the 
\begin_inset Quotes eld
\end_inset

AP
\begin_inset Quotes erd
\end_inset

 parameter within the XBee module's firmware must be set to 
\begin_inset Quotes eld
\end_inset

1
\begin_inset Quotes erd
\end_inset

.
 This is modification is achieved through entering Command Mode and changing
 the parameter by sending the characters 
\begin_inset Quotes eld
\end_inset

ATAP=1
\begin_inset Quotes erd
\end_inset

 while in Command mode.
 
\end_layout

\begin_layout Standard
When in API mode, data is encapsulated within a UART dataframe structure
 as depicted in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Generic-UART-Dataframe"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/UART Data Frame Structure.png
	scale 80

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Generic UART Data Frame Structure 
\begin_inset CommandInset citation
LatexCommand cite
key "xbeedatasheet"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:Generic-UART-Dataframe"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The start delimiter of the UART data frame denotes the start of the frame.
 The start delimiter value will be 0x7E regardless of the type of API dataframe.
 The second field of the UART data frame is the Length field.
 The Length field specifies the number of bytes after the LSB, excluding
 the Checksum field.
 This is essentially the length of the Frame Data field.
 The Frame Data field is specific to the type of the API data frame used
 and contains the payload of the data frame as well.
 Depending on the type of API data frame, the size of the Frame Data field
 can vary.
 The Checksum Field is used to validate the integrity of the overall Data
 Frame and detect in errors within the transmission.
 The Checksum is calculated by the following procedure
\end_layout

\begin_layout Enumerate
Calculate the sum of all the bytes after the Least Significant Bit (LSB
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "LSB"
description "Least Significant Bit"

\end_inset

).
\end_layout

\begin_layout Enumerate
Mask the resulting sum with 0xFF.
\end_layout

\begin_layout Enumerate
Subtract the resulting Value from 255.
\end_layout

\begin_layout Standard
There are various API types supported by the XBee Series 2 platform and
 ZigBee that can be found in 
\begin_inset CommandInset citation
LatexCommand cite
key "xbeedatasheet"

\end_inset

.
 The two API types used in this research however is the ZigBee Transmit
 Request (16-bit network addressing) and ZigBee Receive Packet.
 
\end_layout

\begin_layout Standard
The ZigBee Transmit Request has a data frame structure similar to the one
 depicted in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Generic-UART-Dataframe"

\end_inset

, however, the Frame Data Field is comprised of header information that
 specifies the API type, destination address and payload of the data frame.
 The specific API data frame for the ZigBee Transmit Request (16 bit addressing)
 API data type is depicted in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ZigBee-Transmit-Request-16bit"

\end_inset

.
 The API identifier for this API type is 0x01 as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ZigBee-Transmit-Request-16bit"

\end_inset

.
 The Frame ID field is responsible for identifying the UART data frame for
 the host to match with a subsequent response.
 In this research, this field will be set to zero, since a response is not
 needed.
 The Destination Address field is the 16 bit address of the desired destination
 node.
 The options field specifies extra functionalities within the transmission.
 Such functionalities are the ability to disable transmit retries, and invoking
 a traceroute of the transmission.
 By default, this field is set as 0x00 in order to disable these options.
 The Payload field is the actual data that needs to be transmitted to the
 destination.
 The checksum is used for validating the data frame integrity as discussed
 earlier in this sub section.
 Data must be encapsulated in a data frame similar to the one in Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ZigBee-Transmit-Request-16bit"

\end_inset

 for every transmission.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/Tx16 Request.png
	scale 80

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
ZigBee Transmit Request for 16 Bit Addressing
\begin_inset CommandInset label
LatexCommand label
name "fig:ZigBee-Transmit-Request-16bit"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The ZigBee Receive Packet (16 bit addressing) is the API type that is found
 when a packet is received from a transmitting source node that utilizes
 ZigBee Transmit Request API type.
 As depicted in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ZigBee-Receive-Packet-16bit-addressing"

\end_inset

, the start delimiter, Most Significant Bit (MSB
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "MSB"
description "Most Significant Bit"

\end_inset

) and LSB fields are similar to the structure of the ZigBee Transmit Request
 data frame.
 The API Identifier field however, is 0x81.
 This is the API identifier of ZigBee Receive Packet for 16 bit addressing.
 After the API Identifier field, the Source Address field shows the 16 bit
 address of the transmitting node.
 The Received Signal Strength Index(RSSI
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "RSSI"
description "Received Signal Strength Index "

\end_inset

) of the RF packet is characterized as a 1 byte value in the RSSI field.
 The RSSI value is helpful in determining the relative distance of the source
 node.
 The Options field specifies options such as packet acknowledgment.
 Similar to the ZigBee Transmit Request API data frame, the Payload of the
 ZigBee Receive Packet API data frame should never exceed 100 bytes.
 The last byte within the dataframe is the Checksum field.
 The checksum of the received data packet can be validated through the following
 procedure.
 
\end_layout

\begin_layout Enumerate
Calculate the sum of all the bytes after the LSB (including the checksum).
\end_layout

\begin_layout Enumerate
Mask the resulting sum with 0xFF.
\end_layout

\begin_layout Enumerate
If the result is 0xFF, there is no error within the data frame.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/Tx16 Receive-message.png
	scale 75

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
ZigBee Receive Packet for 16 Bit Addressing
\begin_inset CommandInset label
LatexCommand label
name "fig:ZigBee-Receive-Packet-16bit-addressing"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Swarm Algorithm Design and Implementation
\end_layout

\begin_layout Section
Vision Based Position System Used
\end_layout

\begin_layout Standard
The vision system used within the swarm algorithm is designed to report
 the position of a following quadrotor in relation to the coordinating or
 leading quadrotor within the cluster.
 The vision system utilizes a set of beacons and a camera system.
 The beacon used for experimentation was a Wii bar beacon as illustrated
 in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Beacon-Structure-Used"

\end_inset

.
 The beacon system is 20 cm in length, and contains a group of 5 infrared
 LEDs on each end.
 Each of the Light Emitting Diodes (LED
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "LED"
description "Light Emitting Diode"

\end_inset

) radiated light at a wavelength of 940 nanometers(nm
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "nm"
description "nanometer"

\end_inset

).
 This meant that the beacon system used operated in the infrared band as
 shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Illustration-of-Infrared-beacon"

\end_inset

.
 This is a attractive characteristic for the vision system because with
 an IR filter, the LEDs can be easily distinguished from the surronding
 environment in most situations such as a high lit environment, or a dim
 lit environment.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/wii sensor bar.png
	scale 40

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Beacon Structure Used in Vision System
\begin_inset CommandInset label
LatexCommand label
name "fig:Beacon-Structure-Used"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/wii sensor bar ir.png
	scale 45

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Illustration of Infrared LED Pattern in Beacon Structure Used in Vision
 System
\begin_inset CommandInset label
LatexCommand label
name "fig:Illustration-of-Infrared-beacon"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The camera system consisted of the Pi camera that resided on the swarm controlle
r, a Raspberry Pi (depicted in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Raspberry-Pi-Model"

\end_inset

) processing platform.
 The Pi Camera is a 5 megapixel camera that attaches to the Raspberry Pi
 via Camera Interface Specifications(CIS
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "CIS"
description "Camera Interface Specifications"

\end_inset

) version 2, or commonly referred to as CIS-2
\begin_inset CommandInset citation
LatexCommand cite
key "magpi"

\end_inset

.
 The dimensions of the camera is 25mm x 20mm x 9mm with a weight of approximatel
y 3 grams.
 This provides a small form factor, which is attractive for deployment on
 the quadrotor platform.
 In order to view the infrared LEDs on the beacon platform, a infrared filter
 is applied on the Pi Camera.
 This filter only allows the carmera to see infrared radiation, thus eliminating
 noise from the envrionment introduced by factors such as lighting conditions.
 The vision system calculates the position of the object that the infrared
 beacon is attached to by analyzing the observed LED orientation that was
 captured by the camera.
 The vision system can determine the distance of the beacon position in
 respect to the camera, the perpendicularity(lateral offset) of the beacon
 in respect to the camera, as well as the angular rotation of the beacon
 in respect to the camera.
 Depending on the position of the beacon, the camera will determine the
 characteristics mentioned before by analyzing the distance observed between
 the LEDs of the beacon.
 The vision system reports the lateral position and distance in centimeters.
 
\end_layout

\begin_layout Section
Swarm Topology
\end_layout

\begin_layout Standard
In this research, there are two types of nodes that can participate in the
 swarm.
 The first type, the leader quadrotor or commonly referred to as the coordinatin
g quadrotor, is responsible for maintaing the geometric integrity of the
 swarm as well as coordinating overall movement of the swarm.
 The second type of node that can participate in the swarm is the follower.
 The follower, is responsible for estimating its position in relation to
 the leader, and reporting that position information to the leader.
\end_layout

\begin_layout Section
Swarm Controller
\end_layout

\begin_layout Standard
The swarm controller used in this research is the Raspberry Pi Model B+
 as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Raspberry-Pi-Model"

\end_inset

.
 The Raspberry Pi Model B+ utilizes the ARM1176 Processor and operates with
 a Debian based operating system.
 The power consumption of the Raspberry Pi varies from 700 -1000mA
\begin_inset CommandInset citation
LatexCommand cite
key "xbeedatasheet"

\end_inset

.
 The USB protocol was used to connect the XBee wireless transceiver platform
 to the Raspberry Pi.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/rpi.png
	scale 30

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Raspberry Pi Model B+
\begin_inset CommandInset citation
LatexCommand cite
key "raspberrypi"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:Raspberry-Pi-Model"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Communication Platform Library 
\end_layout

\begin_layout Standard
In order to interface with the XBee Series 2 modules, a communication platform
 library was constructed.
 This library was responsible for converting various data parameters used
 within the swarm algorithm into the correct dataframes for transmission
 and reception by the XBee Series 2 modules.
 The communication platform library also included functionality to observe
 the status and firmware parameters of the XBee modules.
 The communication library had three main functions that were used.
 These functions were
\end_layout

\begin_layout Itemize
Send Transmit Request
\end_layout

\begin_layout Itemize
Receive Packets 
\end_layout

\begin_layout Itemize
ObtainXBeeNodeStatus
\end_layout

\begin_layout Standard
Send Transmit Request:
\end_layout

\begin_layout Standard
The first major process in the communication platform library is the Transmissio
n Routine.
 This routine, depicted in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Transmission-Algorithm-communication-library"

\end_inset

, accepted the movement parameters used within the swarm algorithm, and
 compiled them into a formatted packet that was encapsulated by the existing
 ZigBee API frame.
 This process accepted the following arguments
\end_layout

\begin_layout Itemize
raw_data_msg (possible data types: integer, string, or list of integers)
\end_layout

\begin_layout Itemize
destination_address (possible data types: integer or bytearray of 2 bytes)
\end_layout

\begin_layout Itemize
cmd_id (possible data types: integer or bytearray)
\end_layout

\begin_layout Itemize
options (possible data types: byte)
\end_layout

\begin_layout Itemize
verbose (possible data types: boolean) 
\end_layout

\begin_layout Itemize
Cluster ID (possible data types: integer)
\end_layout

\begin_layout Standard
The raw_data_msg argument could be a simple string used to send an acknowledgmen
t to a swarm node, or it may be a list of movement parameters.
 The movement parameters used to characterize the nodes within the swarm
 were height (cm), perpendicularity(cm), linear distance(cm), and angular
 offset.
 If the raw_data_msg was a list of movemnet parameters (used for a movement
 command or position report), the list of movement parameters would be compiled
 into a single byte array.
 The destination address, command identification(cmd_id), and the options
 field is used as part of the header of the constructed packet.
 Verbose is a flag that logs the process for debugging purposes.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/transmit_process_xbee_library_driver.png
	scale 80

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Transmission Algorithm Utilized in the Communication Platform Library
\begin_inset CommandInset label
LatexCommand label
name "fig:Transmission-Algorithm-communication-library"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The assembled dataframe at the conclusion of the packet assembly is depicted
 in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:General-Dataframe-Structure"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/general_dataframe_for_swarm.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
General Dataframe Structure used in Data Transmission between Swarm Nodes
\begin_inset CommandInset label
LatexCommand label
name "fig:General-Dataframe-Structure"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Whether the communication library is constructing a simple acknowledgment
 packet, a movement command packet with movement parameters, or a position
 report packet with movement parameters, the header format will be the same
 during transmission.
 The Start Delimiter, Length, API Identifier and Destination Address fields
 are used by the ZigBee protocol.
 The Command ID, and Cluster ID fields are custom header fields that are
 used by the swarm algorithm.
 From the perspective of the XBee module, the custom header fields are a
 part of the data payload.
 
\end_layout

\begin_layout Standard
Receiving Packets:
\end_layout

\begin_layout Standard
The responsibility of this function is to validate the integrity of all
 received data packets and extract the swarm specific data packet successfully.
 The process was engineered to receive and process multiple packets at a
 time.
 The only argument that this process accepts is a verbose flag.
 When this flag is set to 1, the process will log all events for debugging
 purposes.
 At the conclusion of the process, a list of packets are returned if multiple
 packets were received at the node.
 Otherwise, a single byte array that represents the packet is returned.
 The function follows this process to successfully extract the data from
 the received packets.
 
\end_layout

\begin_layout Enumerate
Detect if any packets have been received.
 This is done by checking the UART receive buffer within the Raspberry Pi
 (Swarm Controller).
 If the buffer is populated, RF data has been received by the XBee module.
 
\end_layout

\begin_layout Enumerate
Parse the contents of the UART receive buffer into the respective data packets.
 If there are multiple packets within the buffer (the module has received
 multiple packets at the same time), the data is seperated through the detection
 of the start delimiter of each packet.
 
\end_layout

\begin_layout Enumerate
The resulting packets are then validated for integrity.
 This validation includes checking for the correct length of the packets
 through matching the value in the length field of the packet with the calculate
d length of the packet, and validating the checksum of the packet.
\end_layout

\begin_layout Enumerate
The validated packets are then stripped of the ZigBee header (except for
 the node id).
 The resulting packets contain the node ID, command ID, cluster ID, and
 payload.
 
\end_layout

\begin_layout Enumerate
The resulting packets now contain the format needed to be passed to the
 swarm algorithm for further processing.
 A depiction of the packet format of such a packet is in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:General-Dataframe-Structure-ofreceiveddataframe"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/general_received_dataframe_for_swarm.png

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
General Dataframe Structure of a Swarm Specific Received Dataframe 
\begin_inset CommandInset label
LatexCommand label
name "fig:General-Dataframe-Structure-ofreceiveddataframe"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Obtaining Node Status:
\end_layout

\begin_layout Standard
This function reports various parameters of the XBee module such as the
 current 16-bit Network Address and PAN ID .
 The function accomplishes this through enabling Command Mode of the XBee
 module, and sending a formatted AT command in a format similar to the one
 discussed in 6.1.0.6.
\end_layout

\begin_layout Section
Fine-Grained Position Coordination
\end_layout

\begin_layout Standard
The objective of the Fine-Grained Position Coordination Scheme is to maintain
 the geometric integrity of the swarm cluster.
 This is achieved through a leading node ensuring that the followers are
 within a certain geometric boundary.
 This boundary was setup for a cross geometry with the leader node at the
 center similar to the geometry in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Swarm-Topology-for-single-cluster-in-research"

\end_inset

.
 The center quadrotor is the leading quadrotor, and the following quadrotors
 calculate their position relative to the beacon on the leader.
 Notice however, that each node contains a camera and a set of beacons.
 This gives the nodes the ability to have more nodes join the swarm.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/Single Cluster in Cross Topology.png

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Swarm Topology for a Single Cluster used in Research Testbed
\begin_inset CommandInset label
LatexCommand label
name "fig:Swarm-Topology-for-single-cluster-in-research"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To maintain the desired geometric layout of the swarm, the followers must
 be in a certain position in respect to the the leader node.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Degrees-of-Motion"

\end_inset

 shows that the degrees of motion are perpendicularity, distance, and angular
 displacement.
 There is also a fourth degree of motion which is altitude.
 All of these degrees of motion have to be monitored and maintained if the
 swarm is to maintain its geometric integrity.
 The ideal motion parameters for a follower node within a swarm were as
 follows 
\end_layout

\begin_layout Itemize
Distance : 66.04 cm from leader node
\end_layout

\begin_layout Itemize
Height Offset: 0 cm 
\end_layout

\begin_layout Itemize
Perpendicularity Offset: 0 cm
\end_layout

\begin_layout Itemize
Angular Displacement Offset: 0 cm
\end_layout

\begin_layout Standard
These parameters are for the ideal situation.
 However, in a real environment, the quadrotor experiences drift due to
 atomospheric conditions.
 Therefore these ideal parameters cannot be maintained.
 Instead, a set of boundaries, or tolerances are used.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/Freedoms of Motion.png
	scale 90

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Degrees of Motion in the Quadrotor Swarm
\begin_inset CommandInset label
LatexCommand label
name "fig:Degrees-of-Motion"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Due to the vision system having a maximum viewing angle of 53 degrees, a
 boundary must be set for the Perpendicularity degree of motion.
\end_layout

\begin_layout Standard
Since the center of the leader quadrotor is perpendicular to the center
 of the follower quadrotor in the ideal case, trigonometry can be used to
 establish the boundaries.
 If the vision system has a viewing angle of 53 degrees, that means that
 there can be a 26.5 degree viewing offset from the center of the leader
 node.
 Also since 66.04 cm is the desired distance between the leader node and
 the follower node, a right triangle can be drawn , with the shortest leg
 being the amount of perpendicular offset at that distance.
 The perpendicular offset can be calculated as 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Offset_{perpendicular}=tan^{-1}(26.5^{o}*66.04cm)
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
At the distance of 66.04 cm, the follower quadrotor has a perpendicularity
 degree of motion tolerance of 32.9184 cm in either direction.
 If two follower nodes reach the maximum perpendicularity tolerance, there
 is a possibility of them crashing.
 This is prevented by making sure that the boundaries are setup in such
 a way that there is a voided area between neighboring follower nodes, even
 when they are at their maximum perpendicularity offset.
 Starting with the ideal distance of 66.04cm, and the 53 degrees of viewing
 angle of the vision system, the amount of space in the perpendicularity
 degree of freedom between two boundaries can be determined.
 Using the 26.5 degree offset of the boundary like before, it was determined
 that there is a 37 degree angle between the two boundaries.
 With this information, and the the ideal distance of 66.04cm, the law of
 cosines can be used to determine the amount of perpendicularity distance
 in the void that was present.
 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Distance_{Perpendicularity}=(64.04cm)^{2}*(64.04cm)^{2}-2(64.04)(64.04)*cos(37^{o})
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
This distance in the perpendicularity freedom of motion was calculated to
 be 40.64 cm.
 Therefore if the follower nodes are at the ideal distance away from the
 coordinator, they will not crash into each other if they drift into their
 perpendicularity offset boundary.
 However, since this distance cannot be ideal, a tolerance for the distance
 freedom of motion must be established.
 It was determined that having a tolerance of 15.24 cm for the distance freedom
 of motion, would allow for a sufficient distance between the perpendicularity
 boundaries.
 
\end_layout

\begin_layout Standard
The height of the follower nodes were held at a tolerance of 10.16 cm.
 The tolerance for the angular displacement was established by the capabilities
 of the vision system.
 This was determine to have a tolerance of approximately 10 degrees of offset
 in either direction.
 
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Boundary-Concept-Utilized"

\end_inset

 represents a visual representation of the boundaries used on the follower
 nodes, and how there is a void area between each boundary area.
 The leader node maintains a database of every follower node within its
 cluster in memory.
 This database keeps the previous positions of the respective follower node
 in respect to the leader node.
 Using the information of the last position reported by a certain follower,
 along with a new position report of the follower node, the leader node
 is able to make a decision on whether the follower node will exceed its
 boundary area.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/boundary_in_fine_grained_showcase.png
	scale 90

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Boundary Concept Utilized in Fine-Grained-Coordination
\begin_inset CommandInset label
LatexCommand label
name "fig:Boundary-Concept-Utilized"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The communication algorithm that the leader node employs during the Fine-Grained
 swarm coordination is in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Central-Routing-Algorithm"

\end_inset

.
 The Central Routing Algorithm(CRA
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "CRA"
description "Central Routing Algorithm"

\end_inset

) ensures that all participating quadrotors within the swarm cluster are
 accounted for, and received the appropriate movement commands in a timely
 manner.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustbox}{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/central routing algorithm_fine_grained.png
	scale 75

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustbox}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Central Routing Algorithm (CRA)
\begin_inset CommandInset label
LatexCommand label
name "fig:Central-Routing-Algorithm"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Coarse-Grain Position and Movement Vector Construction 
\end_layout

\begin_layout Standard
Where the Fine-Grain Position Coordination establishes the geometric integrity
 of the swarm, the Coarse-Grain Position Coordination establishes a communicatio
n framework that allows the swarm to move towards a certain location.
 Coarse-Grain Position Coordination is where the leader node receives a
 objective to move to (ex.
 following a main beacon), and relays this data to the corresponding swarm
 cluster.
 Due to the nature of the cross swarm topology, the leader node simply forwards
 the movement parameters that it needs to take to each to reach the objective
 to each of the participating followers within the cluster in the form of
 movement commands in a similar fashion of the CRA protocol.
 However, once the leader node receives all acknowledgments in the cluster,
 it will broadcast to the cluster that it has started to move.
 If the swarm must travel to a objective at an offset angle from it current
 location, the leader node will interpret in a format of Perpendicularity
 movement commands and distance movement commands.
 The swarm nodes will move in the Angular offset direction, then the Height
 direction, then the Perpendicularity direction then the Distance movement
 direction.
\end_layout

\begin_layout Section
Swarm Maintenance 
\end_layout

\begin_layout Standard
During the lifetime of the swarm, participating quadrotors may join or leave.
 Quadrotors may leave the swarm due to interference in the communication
 link, loss of battery power, or due to phenomenon in the atmosphere.
 The leader node determines that a participating quadrotor within the cluster
 has left when any of these scenarios occur.
 
\end_layout

\begin_layout Itemize
The follower quadrotor fails to respond with a position data report to the
 leader node for more than two re transmissions.
\end_layout

\begin_layout Itemize
The follower quadrotor fails to ACK the leader quadrotor after 3 re-transmission
s.
\end_layout

\begin_layout Itemize
The follower quadrotor responds with 
\begin_inset Quotes eld
\end_inset

0
\begin_inset Quotes erd
\end_inset

 on all movement parameters (indicates it has lost line of sight of the
 leader quadrotor within the cluster) on a data report to the leader quadrotor
 for more than two communication slots (handshake periods).
 
\end_layout

\begin_layout Standard
The swarm algorithm gives the option to allow a quadrotor to join the swarm.
 If a quadrotor wishes to join a swarm, and is in the Line of Sight(LOS
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "LOS"
description "Line Of Sight"

\end_inset

) of one of the participating follower quadrotors' vision system within
 the existing swarm cluster.
 The joining quadrotor issues a join request to the follower quadrotor.
 Once the follower quadrotor accepts, it will listen to two clusters.
 The cluster that it is following, and the new cluster that has formed as
 the new quadrotor joined the swarm.
 The follower will listen to movement commands received by the leader node,
 as well as provide Fine-Grain Movement Coordination for the newly joined
 quadrotor under the new cluster.
 This functionality is limited as the new-coming quadrotor needs to know
 the network ID of the follower that it is joining before hand as well as
 be in the LOS of its vision system.
\end_layout

\begin_layout Section
Obstacle Early Detection System
\end_layout

\begin_layout Standard
The early detection system is a communication protocol that is in use in
 order to aid against the collision into objects for the quadrotors.
 Currently, this algorithm is only effective with the cross swarm topology.
 Each of the participating follower quadrotors are outfitted with ultra
 sonic ping sensors facing the direction opposing the leader quadrotor.
 Every 20ms, the quadrotor samples the ping sensor to determine if the sampled
 range has fallen below a threshold.
 If the range has fallen below the threshold, the quadrotor sends a data
 packet with the command ID 0x02 to the leader node of the cluster.
 The leader node then broadcasts the data packet with the Obstacle detection
 command ID to the rest of the cluster.
 This command ID has priority over all other command types in order to provide
 a timely alert.
 
\end_layout

\begin_layout Chapter
Conclusion
\end_layout

\begin_layout Standard
This thesis outlined a framework that can establish a de-centralized swarm
 algorithm through establishing the swarm coordination process on the swarm
 itself, which is referred to as a de-centralized quadrotor swarm.
 This de-centralized swarm algorithm successfully utilized a on-board vision
 system in a way to provide position data of all participating nodes and
 use the obtained position data to provide movement coordination throughout
 the swarm.
 This was achieved through maintaining the geometric integrity of the swarm
 through Fine-Grain Coordination, and providing the framework for swarm
 movement through Coarse-Grain Coordination.
\end_layout

\begin_layout Section
Performance Limitations
\end_layout

\begin_layout Standard
The more prevalent performance limitations within the swarm system can be
 seen as the number of participants increase in the overall swarm.
 The efficacy of the swarm algorithm depends on how quickly it can process
 accurate position data and propagate that information for movement coordination.
 As the participants in the swarm increase, the latency required to provide
 movement coordination increases, because more nodes must be attended to
 before movement can actually start.
 In really large networks, the latency within the swarm will propagate in
 such a way that certain clusters of the swarm will be slower to respond
 to movement stimuli than other clusters.
 This is can become a major concern in really large networks, and should
 be explored in the future.
 
\end_layout

\begin_layout Standard
As the participants within the swarm increase, the measurement error within
 position data reporting increase and propagate throughout the swarm more
 easily.
 For very large swarms, measurement error will be highest in remote regions
 of the swarm, and will be observed through erroneous swarm following and
 degradation of the geometry of the swarm.
 This phenomenon is attributed to the vision system utilized within the
 swarm process since it is a measurement device, and always has a accompanied
 measurement error with every measurement.
 
\end_layout

\begin_layout Section
Future Work
\end_layout

\begin_layout Subsection
Self Healing Swarm Topologies
\end_layout

\begin_layout Standard
Self healing swarm topologies are topologies that dynamically change during
 operation in order to compensate for a group of node failures.
 This is attractive for situations in where the environment is harsh, and
 the likelihood of destroyed nodes maybe moderately high.
 This is a interesting topic in the sense, that even more situation awareness
 will be needed between the followers of the swarm.
 More situation awareness will be needed between the followers in the swarm,
 so that a picture of the swarm topology would be known by the participants
 and the appropriate movement coordination can take place to modify it while
 maintaining its overall general geometry.
 
\end_layout

\begin_layout Subsection
Self Forming Swarm Topologies
\end_layout

\begin_layout Standard
Like self healing swarm topologies, more sophistication may be needed within
 the swarm in such a way that a coordination process may be able to provide
 complex movement commands to participants of the swarm simultaneously so
 that a new topology can be shaped.
 A more advanced algorithm may be needed to achieve this.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
fbmatterchapterformat
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintAll"
bibfiles "references_db"
options "plain"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
uncctocformat{chapter}{0pt}{350pt}{
\backslash
appendixname~
\backslash
thecontentslabel:~}
\end_layout

\begin_layout Plain Layout


\backslash
renewcommand{
\backslash
chaptertitlename}{APPENDIX}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout

% The default setting for appendices excludes sections, subsections, etc.
 from
\end_layout

\begin_layout Plain Layout

% the TABLE OF CONTENTS.
\end_layout

\begin_layout Plain Layout

% If you want these in the TABLE OF CONTENTS, increase the number in the
 line below:
\end_layout

\begin_layout Plain Layout

% 1 - Appendices, Sections / 2 - Appendices, Sections, Subsections / 3 -
 etc 
\end_layout

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
addtocontents{toc}{
\backslash
protect
\backslash
setcounter{tocdepth}{0}}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\start_of_appendix
Software Constructed
\end_layout

\begin_layout Section
Source Code Used in Research 
\end_layout

\end_body
\end_document
